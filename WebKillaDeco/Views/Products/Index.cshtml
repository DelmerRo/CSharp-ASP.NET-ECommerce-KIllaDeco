@model WebKillaDeco.ViewModels.ProductCategoryViewModel
@using WebKillaDeco.Helpers
@{
    ViewData["Title"] = "Index";
    var getProductsByFiltersUrl = Url.Action("GetProductsByFilters", "Products");
}

<link href="~/css/product-styles.css" rel="stylesheet">
<!-- Contenido HTML -->
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-2 bg-light">
            <!-- Sidebar -->
            <div class="shop_sidebar_area">
                <!-- Widget Categorías -->
                <div class="widget catagory mb-30">
                    <a asp-action="Index" id="remove-filters-link" class="text-orange">@Alias.RemoveFilters</a>
                    <h6 class="widget-title mb-10">@Alias.Categories</h6>
                    <div class="catagories-menu">
                        <ul>
                            @if (Model.Categories != null && Model.Categories.Any())
                            {
                                @foreach (var category in Model.Categories)
                                {
                                    <li>
                                        <a href="#" class="category-link">@category.Name</a>
                                        @if (category.SubCategories.Any())
                                        {
                                            <ul class="subcategory-list">
                                                @foreach (var subcategory in category.SubCategories)
                                                {
                                                    <li>
                                                        <a href="#" class="subcategory-link" data-subcategory-id="@subcategory.SubCategoryId">@subcategory.Name</a>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                            }
                            else
                            {
                                <li>No hay categorías disponibles</li>
                            }
                        </ul>
                    </div>
                </div>

                <!-- Widget Marcas -->
                <div class="widget brands mb-30">
                    <h6 class="widget-title mb-10">Marcas</h6>
                    <div class="widget-desc">
                        @foreach (var brand in Model.Brands)
                        {
                            <div class="form-check">
                                <input class="form-check-input brand-checkbox" type="checkbox" value="@brand" id="checkbox-@brand">
                                <label class="form-check-label" for="checkbox-@brand">@brand</label>
                            </div>
                        }
                    </div>
                </div>

                <!-- Widget Color -->
                <div class="widget color mb-50">
                    <h6 class="widget-title mb-30">Color</h6>
                    <div class="widget-desc">
                        <!-- Aquí integramos el _ColorPalette.cshtml -->
                        @Html.Partial("_ColorPalette")
                    </div>
                </div>

                <!-- Widget Precio -->
                <div class="widget price mb-50">
                    <h6 class="widget-title mb-30">Precio</h6>
                    <div class="align-items-center">
                        <input type="text" id="price-slider" name="price-slider" class="form-control">
                        <button id="apply-price-filter" class="btn amado-btn mt-2">@Alias.ApplyFilter</button>
                    </div>
                    <input type="hidden" id="min-price" name="min-price" /> <!-- Input oculto para el mínimo precio -->
                    <input type="hidden" id="max-price" name="max-price" /> <!-- Input oculto para el máximo precio -->
                </div>
            </div>
        </div>

        <div class="col-lg-10">
            <!-- Contenido principal -->
            <div class="row mt-4 mr-1">
                <div class="col-lg-12">
                    <!-- Selectbox de Ordenamiento -->
                    <div class="form-group float-right ">
                        <select class="form-control" id="orderSelect">
                            <option value="relevance" selected>Relevancia</option>
                            <option value="low-price">Precio más bajo</option>
                            <option value="high-price">Precio más alto</option>
                        </select>
                    </div>
                </div>
            </div>
            <!-- Contenido principal -->
            <div id="product-list" class="row">
                @Html.Partial("_ProductListPartial", Model.Products)
            </div>
            <input type="hidden" id="selected-color" name="selected-color" /> <!-- Input hidden para almacenar el color seleccionado -->
            <!-- Paginación -->
            <div class="row">
                <div class="col-12">
                    <nav aria-label="navigation">
                        <ul class="pagination justify-content-end mt-50">
                            <!-- Aquí van los botones de paginación -->
                            <li class="page-item active"><a class="page-link" href="#">01.</a></li>
                            <li class="page-item"><a class="page-link" href="#">02.</a></li>
                            <li class="page-item"><a class="page-link" href="#">03.</a></li>
                            <li class="page-item"><a class="page-link" href="#">04.</a></li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Scripts JavaScript -->
@section scripts {
    <script src="~/lib/ion-rangeslider/js/ion.rangeSlider.min.js"></script>
    <script>
        var getProductsByFiltersUrl = '@getProductsByFiltersUrl';
    </script>
    <script src="~/js/product-list.js"></script> 
}

